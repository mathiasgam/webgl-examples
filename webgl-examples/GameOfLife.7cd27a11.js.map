{"version":3,"sources":["util/mesh.ts","util/ShaderProgram.ts","GameOfLife/index.ts"],"names":[],"mappings":"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","file":"GameOfLife.7cd27a11.js","sourceRoot":"..\\..\\src","sourcesContent":["export class Mesh {\r\n    private vao: WebGLVertexArrayObject;\r\n    private bufferVertex: WebGLBuffer;\r\n    private bufferIndex: WebGLBuffer;\r\n\r\n    private numIndices: number;\r\n    public get length(): number {\r\n        return this.numIndices;\r\n    }\r\n\r\n    constructor(private gl: WebGL2RenderingContext, vertices: Float32Array, indices: Uint32Array) {\r\n        this.vao = this.createVertexArrayObject(gl);\r\n        gl.bindVertexArray(this.vao);\r\n\r\n        this.bufferVertex = this.createBuffer(gl);\r\n        gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.bufferVertex);\r\n        gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, vertices, WebGLRenderingContext.STATIC_DRAW);\r\n\r\n        this.bufferIndex = this.createBuffer(gl);\r\n        gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, this.bufferIndex);\r\n        gl.bufferData(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, indices, WebGLRenderingContext.STATIC_DRAW);\r\n\r\n        gl.vertexAttribPointer(0, 3, WebGLRenderingContext.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(0);\r\n\r\n        gl.bindVertexArray(null);\r\n        gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, null);\r\n        gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        this.numIndices = indices.length;\r\n    }\r\n\r\n    public delete(): void {\r\n        const gl = this.gl;\r\n        gl.deleteBuffer(this.bufferVertex);\r\n        gl.deleteBuffer(this.bufferIndex);\r\n        gl.deleteVertexArray(this.vao);\r\n    }\r\n\r\n    public bind(): void {\r\n        this.gl.bindVertexArray(this.vao);\r\n    }\r\n\r\n    public unbind(): void {\r\n        this.gl.bindVertexArray(null);\r\n    }\r\n\r\n    private createVertexArrayObject(gl: WebGL2RenderingContext): WebGLVertexArrayObject {\r\n        const vao = gl.createVertexArray();\r\n        if (vao === null) {\r\n            throw new Error('Failed to create Vertex Array Object');\r\n        }\r\n        return vao as WebGLVertexArrayObject;\r\n    }\r\n\r\n    private createBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\r\n        const buffer = gl.createBuffer();\r\n        if (buffer === null) {\r\n            throw new Error('Failed to create buffer');\r\n        }\r\n        return buffer as WebGLBuffer;\r\n    }\r\n\r\n    public static CenteredQuad(gl: WebGL2RenderingContext): Mesh {\r\n        const indices = new Uint32Array([0,1,2, 0,2,3]);\r\n        const vertices = new Float32Array([-1,-1,0, 1,-1,0, 1,1,0, -1,1,0]);\r\n        return new Mesh(gl, vertices, indices);\r\n    }\r\n\r\n    public static CenteredCube(gl: WebGL2RenderingContext): Mesh {\r\n        const indices = new Uint32Array([\r\n            1, 2, 3,\r\n            7, 6, 5,\r\n            4, 5, 1,\r\n            5, 6, 2,\r\n            2, 6, 7,\r\n            0, 3, 7,\r\n            0, 1, 3,\r\n            4, 7, 5,\r\n            0, 4, 1,\r\n            1, 5, 2,\r\n            3, 2, 7,\r\n            4, 0, 7\r\n        ]);\r\n        const vertices = new Float32Array([\r\n             1,-1,-1,\r\n             1,-1, 1,\r\n            -1,-1, 1,\r\n            -1,-1,-1,\r\n             1, 1,-1,\r\n             1, 1, 1,\r\n            -1, 1, 1,\r\n            -1, 1,-1,\r\n        ]);\r\n        return new Mesh(gl, vertices, indices);\r\n    }\r\n\r\n\r\n}","export class ShaderProgram {\r\n\r\n    private program: WebGLProgram;\r\n    public get value(): WebGLProgram {\r\n        return this.program;\r\n    }\r\n\r\n    private static createProgram(gl: WebGLRenderingContext): WebGLProgram {\r\n        const program = gl.createProgram();\r\n        if (program === null) {\r\n            throw new Error('Failed to create WebGLProgram');\r\n        }\r\n        return program as WebGLProgram;\r\n    }\r\n\r\n    private static createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) {\r\n            throw new Error('Failed to create shader');\r\n        }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n        \r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            var log = gl.getShaderInfoLog(shader);\r\n            throw new Error('FAILED to compile shader: ' + log);\r\n        }\r\n        return shader;\r\n    }\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        // Create Program\r\n        this.program = ShaderProgram.createProgram(gl);\r\n\r\n        // Compile shaders\r\n        const vertex = ShaderProgram.createShader(gl, WebGLRenderingContext.VERTEX_SHADER, vertexSource);\r\n        const fragment = ShaderProgram.createShader(gl, WebGLRenderingContext.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        // Attach and link shaders to the program\r\n        gl.attachShader(this.program, vertex);\r\n        gl.attachShader(this.program, fragment);\r\n        gl.linkProgram(this.program);\r\n\r\n        // Delete the shaders\r\n        gl.deleteShader(vertex);\r\n        gl.deleteShader(fragment);\r\n    }\r\n\r\n    public bind(gl: WebGLRenderingContext): void {\r\n        gl.useProgram(this.program);\r\n    }\r\n\r\n    public unbind(gl: WebGLRenderingContext): void {\r\n        gl.useProgram(null);\r\n    }\r\n\r\n    public getUniformLocation(gl: WebGLRenderingContext, name: string): WebGLUniformLocation {\r\n        const location = gl.getUniformLocation(this.program, name);\r\n        if (location === null) {\r\n            throw new Error('Failed to find uniform: \"' + name + '\"');\r\n        }\r\n        return location;\r\n    }\r\n\r\n    public delete(gl: WebGLRenderingContext): void {\r\n        gl.deleteProgram(this.program);\r\n    }\r\n\r\n}","import { Mesh } from \"../util/mesh\";\r\nimport { ShaderProgram } from \"../util/ShaderProgram\";\r\n\r\nclass App {\r\n\r\n    private static readonly shader_prefix = `#version 300 es\r\n    precision mediump float;\r\n    `\r\n    private static readonly vertex_source = `\r\n    layout(location = 0) in vec3 a_position;\r\n    void main() {\r\n        gl_Position = vec4(a_position.xyz, 1.0);\r\n    }\r\n    `\r\n    private static readonly fragment_source = `\r\n    layout(location = 0) out vec4 FragColor;\r\n    uniform sampler2D u_texture;\r\n\r\n    int get(ivec2 fragCoord, ivec2 offset) {\r\n        return int(texelFetch(u_texture, fragCoord + offset, 0).r);\r\n    }\r\n\r\n    void main() {\r\n        ivec2 fc = ivec2(gl_FragCoord.xy);\r\n        int sum = \r\n            get(fc, ivec2(-1,-1)) +\r\n            get(fc, ivec2( 1,-1)) + \r\n            get(fc, ivec2(-1, 1)) + \r\n            get(fc, ivec2( 1, 1)) + \r\n            get(fc, ivec2( 0,-1)) + \r\n            get(fc, ivec2( 0, 1)) + \r\n            get(fc, ivec2(-1, 0)) + \r\n            get(fc, ivec2( 1, 0));\r\n        if (sum == 3) {\r\n            FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n        } else if (sum == 2) {\r\n            FragColor = texelFetch(u_texture, fc, 0);\r\n        } else  {\r\n            FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n    }`\r\n\r\n    private static readonly vertex_blit = `\r\n    layout(location = 0) in vec3 a_position;\r\n    out vec2 uv;\r\n    void main() {\r\n        gl_Position = vec4(a_position.xyz, 1.0);\r\n        uv = a_position.xy * 0.5 + 0.5;\r\n    }`\r\n\r\n    private static readonly fragment_blit = `\r\n    layout(location = 0) out vec4 FragColor;\r\n    uniform sampler2D u_texture;\r\n    in vec2 uv;\r\n    void main() {\r\n        FragColor = texture(u_texture, uv);\r\n    }`\r\n\r\n    private program: ShaderProgram;\r\n    private textureTarget: WebGLTexture;\r\n    private textureSource: WebGLTexture;\r\n    private framebuffer: WebGLFramebuffer;\r\n\r\n    private textureLocation: WebGLUniformLocation;\r\n    private textureLocationBlit: WebGLUniformLocation;\r\n\r\n    private programBlit: ShaderProgram;\r\n\r\n    private quad: Mesh;\r\n\r\n    private gl: WebGL2RenderingContext;\r\n    private width: number;\r\n    private height: number;\r\n\r\n    private createTexture(gl: WebGLRenderingContext, width: number, height: number): WebGLTexture {\r\n        const texture = gl.createTexture();\r\n        if (texture === null) {\r\n            throw new Error('Failed to create texture');\r\n        }\r\n\r\n        const N = width * height;\r\n        const pixels = new Uint8Array(N * 4);\r\n\r\n        for (let i = 0; i < N; i++) {\r\n            const val = Math.random() < 0.5 ? 0 : 255;\r\n            pixels[i * 4] = val;\r\n            pixels[i * 4 + 1] = 0;\r\n            pixels[i * 4 + 2] = 0;\r\n            pixels[i * 4 + 3] = 255;\r\n        }\r\n\r\n        gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, texture);\r\n        gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, width, height, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, pixels);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n        return texture as WebGLTexture;\r\n    }\r\n\r\n    private createFrameBuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\r\n        const framebuffer = gl.createFramebuffer();\r\n        if (framebuffer === null) {\r\n            throw new Error('Failed to create framebuffer');\r\n        }\r\n        return framebuffer as WebGLFramebuffer;\r\n    }\r\n\r\n    private checkGLError(gl: WebGLRenderingContext) {\r\n        const err = gl.getError();\r\n        if (err) {\r\n            throw new Error('WebGL Error: ' + err);\r\n        }\r\n    }\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.width = canvas.width;\r\n        this.height = canvas.height;\r\n\r\n        const gl = canvas.getContext('webgl2') as WebGL2RenderingContext;\r\n        this.gl = gl;\r\n        gl.viewport(0,0,this.width,this.height);\r\n\r\n        gl.clearColor(0,0,0,1);\r\n        gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);\r\n\r\n\r\n        this.program = new ShaderProgram(gl, App.shader_prefix + App.vertex_source, App.shader_prefix + App.fragment_source);\r\n        this.programBlit = new ShaderProgram(gl, App.shader_prefix + App.vertex_blit, App.shader_prefix + App.fragment_blit);\r\n        this.textureLocation = this.program.getUniformLocation(gl, 'u_texture');\r\n        this.textureLocationBlit = this.programBlit.getUniformLocation(gl, 'u_texture');\r\n\r\n        this.quad = Mesh.CenteredQuad(gl);\r\n\r\n        this.textureTarget = this.createTexture(gl, this.width, this.height);\r\n        this.textureSource = this.createTexture(gl, this.width, this.height);\r\n\r\n        this.framebuffer = this.createFrameBuffer(gl);\r\n\r\n    }\r\n\r\n    public Update(timestamp: number): void {\r\n        requestAnimationFrame(this.Update.bind(this));\r\n        this.quad.bind();\r\n\r\n        \r\n        this.program.bind(this.gl);\r\n        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.textureSource);\r\n\r\n        this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.framebuffer);\r\n        this.gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.COLOR_ATTACHMENT0, WebGLRenderingContext.TEXTURE_2D, this.textureTarget, 0);\r\n\r\n        this.gl.drawElements(WebGLRenderingContext.TRIANGLES, this.quad.length, WebGLRenderingContext.UNSIGNED_INT, 0);\r\n        \r\n\r\n        this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);\r\n        this.gl.viewport(0, 0, this.width, this.height);\r\n\r\n        this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);\r\n        \r\n        this.programBlit.bind(this.gl);\r\n        this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.textureSource);\r\n        this.gl.uniform1i(this.textureLocationBlit, 0);\r\n        this.gl.drawElements(WebGLRenderingContext.TRIANGLES, this.quad.length, WebGLRenderingContext.UNSIGNED_INT, 0);\r\n        this.programBlit.unbind(this.gl);\r\n        \r\n        this.quad.unbind();\r\n\r\n        const tmp = this.textureTarget;\r\n        this.textureTarget = this.textureSource;\r\n        this.textureSource = tmp;\r\n\r\n        this.checkGLError(this.gl);\r\n    }\r\n\r\n}\r\n\r\nwindow.onload = () => {\r\n    console.clear();\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n    const app = new App(canvas);\r\n    requestAnimationFrame(app.Update.bind(app));\r\n}"]}