{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA+GA,aA7GA,IAAA,EAAA,WA4DI,SAAA,EAA2B,GAAA,KAAA,GAAA,EAtDV,KAAA,cAAgB,gDAEhB,KAAA,cAAgB,kHAMhB,KAAA,gBAAkB,2GAgD/B,EAAG,WAAW,GAAG,GAAG,GAAG,GACvB,EAAG,MAAM,sBAAsB,kBAGzB,IAAA,EAAa,IAAI,YAAY,CAAC,EAAE,EAAE,EAAG,EAAE,EAAE,IACzC,EAAc,IAAI,aAAa,EAAE,GAAG,EAAE,EAAG,GAAG,EAAE,EAAG,EAAE,EAAE,GAAI,EAAE,EAAE,IAE9D,KAAA,IAAM,KAAK,aAAa,GAC7B,EAAG,WAAW,sBAAsB,aAAc,KAAK,KACvD,EAAG,WAAW,sBAAsB,aAAc,EAAa,sBAAsB,aAEhF,KAAA,IAAM,KAAK,aAAa,GAC7B,EAAG,WAAW,sBAAsB,qBAAsB,KAAK,KAC/D,EAAG,WAAW,sBAAsB,qBAAsB,EAAY,sBAAsB,aAGvF,KAAA,QAAU,KAAK,cAAc,GAClC,EAAG,aAAa,KAAK,QAAS,KAAK,mBAAmB,IACtD,EAAG,aAAa,KAAK,QAAS,KAAK,qBAAqB,IACxD,EAAG,YAAY,KAAK,SAEpB,EAAG,WAAW,KAAK,SAGb,IAAA,EAAmB,EAAG,kBAAkB,KAAK,QAAS,aAC5D,EAAG,oBAAoB,EAAkB,EAAG,sBAAsB,OAAO,EAAO,EAAG,GACnF,EAAG,wBAAwB,GAE3B,EAAG,aAAa,sBAAsB,UAAW,EAAW,OAAQ,EAAG,aAAc,GAiB7F,OAtFY,EAAA,UAAA,aAAR,SAAqB,EAA4B,EAAc,GACrD,IAAA,EAAS,EAAG,aAAa,GAC3B,GAAW,OAAX,EACM,MAAA,IAAI,MAAM,2BAKhB,GAHJ,EAAG,aAAa,EAAQ,GACxB,EAAG,cAAc,IAEZ,EAAG,mBAAmB,EAAQ,EAAG,gBAAiB,CAC/C,IAAA,EAAM,EAAG,iBAAiB,GACxB,MAAA,IAAI,MAAM,6BAA+B,GAE5C,OAAA,GAGH,EAAA,UAAA,mBAAR,SAA2B,GAChB,OAAA,KAAK,aAAa,EAAI,sBAAsB,cAAe,KAAK,cAAgB,KAAK,gBAGxF,EAAA,UAAA,qBAAR,SAA6B,GAClB,OAAA,KAAK,aAAa,EAAI,sBAAsB,gBAAiB,KAAK,cAAgB,KAAK,kBAG1F,EAAA,UAAA,aAAR,SAAqB,GACX,IAAA,EAAS,EAAG,eACd,GAAW,OAAX,EACM,MAAA,IAAI,MAAM,2BAEb,OAAA,GAGH,EAAA,UAAA,cAAR,SAAsB,GACZ,IAAA,EAAU,EAAG,gBACf,GAAY,OAAZ,EACM,MAAA,IAAI,MAAM,4BAEb,OAAA,GAoCJ,EAAA,UAAA,IAAP,aAIO,EAAA,UAAA,QAAP,WACQ,KAAK,KACD,KAAK,KACA,KAAA,GAAG,aAAa,KAAK,KAE1B,KAAK,KACA,KAAA,GAAG,aAAa,KAAK,OAI1C,EA3GA,GA6GA,OAAO,OAAS,WACN,IACA,EAD6B,SAAS,eAAe,UACzC,WAAW,UACjB,IAAI,EAAI,GAChB","file":"src.9f09f658.js","sourceRoot":"..\\src","sourcesContent":["\r\n\r\nclass App {\r\n\r\n    private vbo : WebGLBuffer;\r\n    private ebo : WebGLBuffer;\r\n    private program : WebGLProgram;\r\n\r\n    private readonly shader_prefix = `#version 300 es\r\n    precision mediump float;`\r\n    private readonly vertex_source = `\r\n    in vec3 aPosition;\r\n    \r\n    void main() {\r\n        gl_Position = vec4(aPosition.xyz * 0.5, 1.0);\r\n    }`\r\n    private readonly fragment_source = `\r\n    out vec4 FragColor;\r\n    \r\n    void main() {\r\n        FragColor = vec4(0.3, 0.8, 0.3, 1.0);\r\n    }`\r\n    \r\n    private createShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) {\r\n            throw new Error('Failed to create shader');\r\n        }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n        \r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            var log = gl.getShaderInfoLog(shader);\r\n            throw new Error('FAILED to compile shader: ' + log);\r\n        }\r\n        return shader;\r\n    }\r\n    \r\n    private createVertexShader(gl: WebGL2RenderingContext) {\r\n        return this.createShader(gl, WebGLRenderingContext.VERTEX_SHADER, this.shader_prefix + this.vertex_source);\r\n    }\r\n\r\n    private createFragmentShader(gl: WebGL2RenderingContext) {\r\n        return this.createShader(gl, WebGLRenderingContext.FRAGMENT_SHADER, this.shader_prefix + this.fragment_source);\r\n    }\r\n\r\n    private createBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\r\n        const buffer = gl.createBuffer();\r\n        if (buffer === null) {\r\n            throw new Error('Failed to create buffer');\r\n        }\r\n        return buffer as WebGLBuffer;\r\n    }\r\n\r\n    private createProgram(gl: WebGL2RenderingContext) {\r\n        const program = gl.createProgram();\r\n        if (program === null) {\r\n            throw new Error('Failed to create program');\r\n        }\r\n        return program as WebGLProgram;\r\n    }\r\n\r\n    public constructor(private gl: WebGL2RenderingContext) {\r\n\r\n        gl.clearColor(.2,.4,.6,1.0);\r\n        gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);\r\n        \r\n        // #### Vertex data ####\r\n        const index_data = new Uint32Array([0,1,2, 0,2,3]);\r\n        const vertex_data = new Float32Array([-1,-1,0, 1,-1,0, 1,1,0, -1,1,0]);\r\n\r\n        this.vbo = this.createBuffer(gl);\r\n        gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.vbo);\r\n        gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, vertex_data, WebGLRenderingContext.STATIC_DRAW);\r\n\r\n        this.ebo = this.createBuffer(gl);\r\n        gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, this.ebo);\r\n        gl.bufferData(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, index_data, WebGLRenderingContext.STATIC_DRAW);\r\n        \r\n        // #### Shader program ####\r\n        this.program = this.createProgram(gl);\r\n        gl.attachShader(this.program, this.createVertexShader(gl));\r\n        gl.attachShader(this.program, this.createFragmentShader(gl));\r\n        gl.linkProgram(this.program);\r\n        \r\n        gl.useProgram(this.program);\r\n        \r\n        // #### bind shader attributes ####\r\n        const locationPosition = gl.getAttribLocation(this.program, 'aPosition');\r\n        gl.vertexAttribPointer(locationPosition, 3, WebGLRenderingContext.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(locationPosition);\r\n        \r\n        gl.drawElements(WebGLRenderingContext.TRIANGLES, index_data.length, gl.UNSIGNED_INT, 0);\r\n    }\r\n\r\n    public run() {\r\n\r\n    }\r\n\r\n    public destroy() {\r\n        if (this.gl) {   \r\n            if (this.vbo) {\r\n                this.gl.deleteBuffer(this.vbo);\r\n            }\r\n            if (this.ebo) {\r\n                this.gl.deleteBuffer(this.ebo);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nwindow.onload = () => {\r\n    const canvas : HTMLCanvasElement = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const gl = canvas.getContext('webgl2') as WebGL2RenderingContext;\r\n    const app = new App(gl);\r\n    app.run();\r\n}"]}