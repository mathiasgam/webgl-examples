{"version":3,"sources":["util/mesh.ts","index.ts"],"names":[],"mappings":"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","file":"src.8b11a8ce.js","sourceRoot":"..\\src","sourcesContent":["export class Mesh {\r\n    private vao: WebGLVertexArrayObject;\r\n    private bufferVertex: WebGLBuffer;\r\n    private bufferIndex: WebGLBuffer;\r\n\r\n    private numIndices: number;\r\n    public get length(): number {\r\n        return this.numIndices;\r\n    }\r\n\r\n    constructor(private gl: WebGL2RenderingContext, vertices: Float32Array, indices: Uint32Array) {\r\n        this.vao = this.createVertexArrayObject(gl);\r\n        gl.bindVertexArray(this.vao);\r\n\r\n        this.bufferVertex = this.createBuffer(gl);\r\n        gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, this.bufferVertex);\r\n        gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, vertices, WebGLRenderingContext.STATIC_DRAW);\r\n\r\n        this.bufferIndex = this.createBuffer(gl);\r\n        gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, this.bufferIndex);\r\n        gl.bufferData(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, indices, WebGLRenderingContext.STATIC_DRAW);\r\n\r\n        gl.vertexAttribPointer(0, 3, WebGLRenderingContext.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(0);\r\n\r\n        gl.bindVertexArray(null);\r\n        gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, null);\r\n        gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        this.numIndices = indices.length;\r\n    }\r\n\r\n    public delete(): void {\r\n        const gl = this.gl;\r\n        gl.deleteBuffer(this.bufferVertex);\r\n        gl.deleteBuffer(this.bufferIndex);\r\n        gl.deleteVertexArray(this.vao);\r\n    }\r\n\r\n    public bind(): void {\r\n        this.gl.bindVertexArray(this.vao);\r\n    }\r\n\r\n    public unbind(): void {\r\n        this.gl.bindVertexArray(null);\r\n    }\r\n\r\n    private createVertexArrayObject(gl: WebGL2RenderingContext): WebGLVertexArrayObject {\r\n        const vao = gl.createVertexArray();\r\n        if (vao === null) {\r\n            throw new Error('Failed to create Vertex Array Object');\r\n        }\r\n        return vao as WebGLVertexArrayObject;\r\n    }\r\n\r\n    private createBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\r\n        const buffer = gl.createBuffer();\r\n        if (buffer === null) {\r\n            throw new Error('Failed to create buffer');\r\n        }\r\n        return buffer as WebGLBuffer;\r\n    }\r\n\r\n    public static CenteredQuad(gl: WebGL2RenderingContext): Mesh {\r\n        const indices = new Uint32Array([0,1,2, 0,2,3]);\r\n        const vertices = new Float32Array([-1,-1,0, 1,-1,0, 1,1,0, -1,1,0]);\r\n        return new Mesh(gl, vertices, indices);\r\n    }\r\n\r\n    public static CenteredCube(gl: WebGL2RenderingContext): Mesh {\r\n        const indices = new Uint32Array([0,1,2, 0,2,3]);\r\n        const vertices = new Float32Array([-1,-1,0, 1,-1,0, 1,1,0, -1,1,0]);\r\n        return new Mesh(gl, vertices, indices);\r\n    }\r\n\r\n\r\n}","import { Mesh } from \"./util/mesh\";\r\n\r\nclass App {\r\n\r\n    private program : WebGLProgram;\r\n    private mesh: Mesh;\r\n\r\n    private readonly shader_prefix = `#version 300 es\r\n    precision mediump float;`\r\n    private readonly vertex_source = `\r\n    in vec3 aPosition;\r\n    \r\n    void main() {\r\n        gl_Position = vec4(aPosition.xyz * 0.5, 1.0);\r\n    }`\r\n    private readonly fragment_source = `\r\n    out vec4 FragColor;\r\n    \r\n    void main() {\r\n        FragColor = vec4(0.3, 0.8, 0.3, 1.0);\r\n    }`\r\n    \r\n    private createShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) {\r\n            throw new Error('Failed to create shader');\r\n        }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n        \r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            var log = gl.getShaderInfoLog(shader);\r\n            throw new Error('FAILED to compile shader: ' + log);\r\n        }\r\n        return shader;\r\n    }\r\n    \r\n    private createVertexShader(gl: WebGL2RenderingContext) {\r\n        return this.createShader(gl, WebGLRenderingContext.VERTEX_SHADER, this.shader_prefix + this.vertex_source);\r\n    }\r\n\r\n    private createFragmentShader(gl: WebGL2RenderingContext) {\r\n        return this.createShader(gl, WebGLRenderingContext.FRAGMENT_SHADER, this.shader_prefix + this.fragment_source);\r\n    }\r\n\r\n    private createProgram(gl: WebGL2RenderingContext) {\r\n        const program = gl.createProgram();\r\n        if (program === null) {\r\n            throw new Error('Failed to create program');\r\n        }\r\n        return program as WebGLProgram;\r\n    }\r\n\r\n    public constructor(private gl: WebGL2RenderingContext, width: number, height: number) {\r\n\r\n        gl.enable(WebGLRenderingContext.DEPTH_TEST);\r\n        gl.viewport(0, 0, width, height);\r\n\r\n        gl.clearColor(.2,.4,.6,1.0);\r\n        gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);\r\n\r\n        // #### Shader program ####\r\n        this.program = this.createProgram(gl);\r\n        gl.attachShader(this.program, this.createVertexShader(gl));\r\n        gl.attachShader(this.program, this.createFragmentShader(gl));\r\n        gl.linkProgram(this.program);\r\n        gl.useProgram(this.program);\r\n\r\n        this.mesh = Mesh.CenteredQuad(gl);\r\n    }\r\n\r\n    public Update() {\r\n        const gl = this.gl;\r\n\r\n        this.mesh.bind();\r\n        gl.drawElements(WebGLRenderingContext.TRIANGLES, this.mesh.length, gl.UNSIGNED_INT, 0);\r\n        this.mesh.unbind();\r\n    }\r\n\r\n    public destroy() {\r\n        if (this.mesh) {\r\n            this.mesh.delete();\r\n        }\r\n    }\r\n}\r\n\r\nwindow.onload = () => {\r\n    const canvas : HTMLCanvasElement = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const gl = canvas.getContext('webgl2') as WebGL2RenderingContext;\r\n    const app = new App(gl, canvas.width, canvas.height);\r\n    app.Update();\r\n}"]}